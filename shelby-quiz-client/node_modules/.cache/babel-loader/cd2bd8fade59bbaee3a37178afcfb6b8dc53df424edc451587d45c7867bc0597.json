{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\Quiz App with React and Net Core Api\\\\shelby-quiz-client\\\\src\\\\components\\\\Quiz.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { createAPIEndpoint, ENDPOINTS } from \"../api\";\nimport useStateContext from \"../hooks/useStateContext\";\nimport { Card, CardContent, CardHeader, Typography, List, ListItemButton } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Quiz() {\n  _s();\n  const [qns, setQns] = useState([]);\n  const [qnsIndex, setQnsIndex] = useState(0);\n  const [timeTaken, setTimeTaken] = useState(0);\n  let timer;\n  const startTimer = () => {\n    timer = setInterval(() => {\n      setTimeTaken(prev => prev + 1);\n    }, [1000]);\n  };\n  useEffect(() => {\n    createAPIEndpoint(ENDPOINTS.question).fetch().then(res => {\n      setQns(res.data);\n      startTimer();\n    }).catch(err => {\n      console.log(err);\n      return () => {\n        clearInterval(timer);\n      };\n    });\n  }, []);\n  return qns.length != 0 ? /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      maxWidth: 640,\n      mx: 'auto',\n      mt: 5\n    },\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      title: 'Question ' + (qnsIndex + 1) + ' of 5',\n      action: /*#__PURE__*/_jsxDEV(Typography, {\n        children: [\" \", timeTaken]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 20\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: qns[qnsIndex].qnInWords\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        children: qns[qnsIndex].options.map((item, idx) => /*#__PURE__*/_jsxDEV(ListItemButton, {\n          disableRipple: true,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: [\" \", String.fromCharCode(65 + idx) + \" . \", \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 16\n            }, this), \" \", item]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 7\n  }, this) : null;\n}\n_s(Quiz, \"g5Uga7/xKSsnaKDlnodSi4/8TZQ=\");\n_c = Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","useEffect","useState","createAPIEndpoint","ENDPOINTS","useStateContext","Card","CardContent","CardHeader","Typography","List","ListItemButton","jsxDEV","_jsxDEV","Quiz","_s","qns","setQns","qnsIndex","setQnsIndex","timeTaken","setTimeTaken","timer","startTimer","setInterval","prev","question","fetch","then","res","data","catch","err","console","log","clearInterval","length","sx","maxWidth","mx","mt","children","title","action","fileName","_jsxFileName","lineNumber","columnNumber","variant","qnInWords","options","map","item","idx","disableRipple","String","fromCharCode","_c","$RefreshReg$"],"sources":["C:/Projects/Quiz App with React and Net Core Api/shelby-quiz-client/src/components/Quiz.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { createAPIEndpoint, ENDPOINTS } from \"../api\";\r\nimport useStateContext from \"../hooks/useStateContext\";\r\nimport { Card, CardContent, CardHeader, Typography, List, ListItemButton} from \"@mui/material\";\r\n\r\n\r\nexport default function Quiz() {\r\n  const [qns, setQns] = useState([]);\r\n  const [qnsIndex, setQnsIndex] = useState(0);\r\n  const [timeTaken, setTimeTaken] = useState(0);\r\n\r\n\r\n  let timer;\r\n\r\n  const startTimer = () => {\r\n    timer = setInterval(() => {\r\n      setTimeTaken(prev => prev + 1)\r\n    }, [1000]);\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    createAPIEndpoint(ENDPOINTS.question)\r\n      .fetch()\r\n      .then((res) => {\r\n        setQns(res.data);\r\n        startTimer();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n\r\n        return () => {clearInterval(timer)}\r\n\r\n      });\r\n  }, []);\r\n  return (\r\n    qns.length != 0\r\n    ? <Card sx={{ maxWidth: 640, mx: 'auto', mt: 5}}>\r\n      <CardHeader title={'Question ' + (qnsIndex + 1) + ' of 5'}\r\n          action= {<Typography> {timeTaken}</Typography>}/>\r\n      \r\n     \r\n       <CardContent>\r\n        <Typography variant =\"h6\">\r\n          {qns[qnsIndex].qnInWords}\r\n        </Typography>\r\n        <List>\r\n            {qns[qnsIndex].options.map((item, idx) =>            \r\n            <ListItemButton key={idx}  disableRipple>\r\n              <div>\r\n               <b> {String.fromCharCode(65 + idx)+ \" . \"} </b> {item}\r\n              </div>\r\n\r\n            </ListItemButton>            \r\n            )}\r\n          </List>\r\n       </CardContent>\r\n      </Card> \r\n      : null\r\n  )\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}